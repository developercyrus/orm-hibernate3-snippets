<project 
        xmlns="http://maven.apache.org/POM/4.0.0" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    
    <!-- 
        Comment: 
        0.  the project named "orm-hibernate3-snippets" not because of code itself used for hibernate 3, but because of the maven plugin: hibernate3-maven-plugin
        1.  each goal in hibernate3-maven-plugin invokes a separate phase prior to executing itlsef, which causes the lifecycle of maven 
            repeatedly run several times. hardly plan a normal lifecycle. Suggest not to use if not necessary
        2.  planning use jetty as jndi server at the "initialize" phase for hibernate connection, but because of item 1, 
            jetty repeatedly start, and throws NoClassDefFoundError: org/eclipse/jetty/util/FutureCallback
        3.  item 2 is rejected, and use self-created jndi server 
        4.  although the package orm.hibernate.one2many.example.gen can be deleted and re-generated by mvn install, the java object in 
            orm.hibernate.one2many.example.dao is denpendent on pojo in orm.hibernate.one2many.example.gen. How to de-couple the generated 
            code while keeping using maven to automate the project build? Some suggests not to re-generate the code again, 
            http://stackoverflow.com/questions/8685301/what-are-best-practices-for-using-hibernates-hbm2java
        5.  plan to test: NamedQuery
            
        
        Environment:
        1.  Windows 7 64 bit (assume OS installed in C:\Windows)
        2.  Eclipse 4.4
        3.  JDK 8.0
        4.  zwamp-1.1.2 (mysql)   //to do: launch it wih antrun-maven-plugin
       
        Approach1 - all automate
        1.  "mvn install". This will include 
                a) initialize table schema                     
                b) generate java pojo by "hbm2java"                           
                    i.  documentation says, invokes the execution of the lifecycle phase process-resources prior to executing itself
                    ii. some suggests bounding to generate-sources
                c1) generate dao by "hbm2dao" (currently used, partial success, plan using different pakcage, but fail)    
                    i.  documentation says, invokes the execution of the lifecycle phase test-compile prior to executing itself                          
                c2) generate dao by "hbm2template" (partial success, plan using different pakcage, but fail)   
                    i.  documentation says, invokes the execution of the lifecycle phase compile prior to executing itself                   
                d) generate hbm.xml by "hbm2hbmxml"     
                    i.  documentation says, invokes the execution of the lifecycle phase compile prior to executing itself
                    ii. some suggests bounding to generate-resources
                e) run integration test
        2.  this project includes integration test 
        3.  with maven-failsafe-plugin, any java file name with "IT" will be treated as 
            intergration test (by maven, the phase is integration-test). 
        4)  the integration test report can be found in \target\failsafe-reports
       
        Remark:
        1.  There're 4 implementations to config Hibernate Tools, http://docs.jboss.org/tools/latest/en/hibernatetools/html/ant.html
                a) configuration
                b) annotationconfiguration
                c) jpaconfiguration
                d) jdbcconfiguration                               
            
        Reference:
        1.  http://mojo.codehaus.org/hibernate3-maven-plugin/   
        2.  http://mojo.codehaus.org/hibernate3-maven-plugin/hbm2java-mojo.html
        3.  http://mojo.codehaus.org/hibernate3-maven-plugin/hbm2dao-mojo.html
        4.  http://mojo.codehaus.org/hibernate3-maven-plugin/hbm2hbmxml-mojo.html

    -->
        
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <jetty.version>9.0.0.v20130308</jetty.version>      
    </properties>
    
    <repositories>
        <repository>
            <id>JBoss repository</id>
            <url>http://repository.jboss.com/maven2/</url>
        </repository>
    </repositories>
    
    <modelVersion>4.0.0</modelVersion>
    <groupId>orm-hibernate-snippets</groupId>
    <artifactId>orm-hibernate-snippets</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>
    
    
    <build>   
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>   
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.apache.maven.plugins</groupId>
                                        <artifactId>maven-antrun-plugin</artifactId>
                                        <versionRange>[1.8]</versionRange>
                                        <goals>
                                            <goal>run</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <execute>  
                                            <runOnIncremental>false</runOnIncremental>  
                                        </execute>                                            
                                    </action>
                                </pluginExecution>  
                                
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.codehaus.mojo</groupId>
                                        <artifactId>sql-maven-plugin</artifactId>
                                        <versionRange>[1.5,)</versionRange>
                                        <goals>
                                            <goal>execute</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    
                                    <action>
                                        <execute>  
                                            <runOnIncremental>false</runOnIncremental>  
                                        </execute>  
                                    </action>
                                </pluginExecution>
                                         
                                         
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.codehaus.mojo</groupId>
                                        <artifactId>hibernate3-maven-plugin</artifactId>                                       
                                        <versionRange>[2.2]</versionRange>                                                                                                                     
                                        <goals>
                                            <goal>hbm2java</goal>
                                            <goal>hbm2dao</goal>
                                            <goal>hbm2hbmxml</goal>
                                                                                        
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <execute>  
                                            <runOnIncremental>false</runOnIncremental>  
                                        </execute>                                            
                                    </action>
                                </pluginExecution>                                                                                      
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    
        <plugins>   
            
            <!-- initialize -->            
            <!--
                1.  throws NoClassDefFoundError: org/eclipse/jetty/util/FutureCallback 
            -->
            <!-- 
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>${jetty.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>5.1.9</version>
                    </dependency>                                                                  
                </dependencies>

                <configuration>
                    <stopKey>foo</stopKey>
                    <stopPort>9999</stopPort>          
                    <scanIntervalSeconds>10</scanIntervalSeconds>
                    <webApp>
                       <contextPath>/</contextPath>
                    </webApp>
                </configuration>
                <executions>
                    <execution>
                        <id>start-jetty for JNDI server</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                        <configuration>
                            <jettyXml>src/main/resources/orm/hibernate/one2many/example1/jetty/jetty.xml</jettyXml>
                            <scanIntervalSeconds>0</scanIntervalSeconds>
                            <daemon>true</daemon>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop-jetty</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            -->
            
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <groupId>org.apache.maven.plugins</groupId>
                <version>1.8</version>
                <executions>

                    <execution>
                        <id>orm.hibernate.one2many.example1.jndi.MysqlJNDIServer | launch-jndi </id>
                        <phase>initialize</phase>
                        <configuration>
                            <target>
                                <echo message="java -classpath ${basedir}\src\main\resources\orm\hibernate\one2many\example1\jndi\jndiserver.jar;${basedir}\src\main\resources\orm\hibernate\one2many\example1\jndi\mysql-connector-java-5.1.9.jar orm.hibernate.one2many.example1.jndi.MysqlJNDIServer" /> 
                                <java classname="orm.hibernate.one2many.example1.jndi.MysqlJNDIServer" fork="true" spawn="true">      
                                    <classpath>     
                                        <path path="${basedir}\src\main\resources\orm\hibernate\one2many\example1\jndi\jndiserver.jar;${basedir}\src\main\resources\orm\hibernate\one2many\example1\jndi\mysql-connector-java-5.1.9.jar" />
                                    </classpath>                                                                
                                </java>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    
                    <execution>
                        <id>orm.hibernate.one2many.example1.jndi.MysqlJNDIServer | stop-jndi</id>
                        <phase>post-integration-test</phase>
                        <configuration>
                            <target>                                                               
                                <echo message='C:\Windows\System32\taskkill.exe /F /FI "IMAGENAME eq java.ex*"' /> 
                                <exec executable="C:\Windows\System32\taskkill.exe" spawn="true">
                                    <arg value="/F /FI 'IMAGENAME eq java.ex*'" />
                                </exec>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                   </execution>     
                </executions>                   
            </plugin>
                
            
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>sql-maven-plugin</artifactId>
                <version>1.5</version>
                <dependencies>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>5.1.9</version>
                    </dependency>
                </dependencies>
                
                <executions>
                    <execution>
                        <id>drop-db-before-test-if-any (mysql)</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <driver>com.mysql.jdbc.Driver</driver>
                            <url>jdbc:mysql://localhost:3306</url>
                            <username>root</username>
                            <password></password>
                            <settingsKey>sensibleKey</settingsKey>
                            <skip>${maven.test.skip}</skip>
                            <autocommit>true</autocommit>
                            <sqlCommand>                                                                
                                drop database if exists orm_hibernate_one2many_example1;                                                        
                            </sqlCommand>
                            <onError>continue</onError>
                        </configuration>
                    </execution>
                    

                    <execution>
                        <id>create-db (mysql)</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <driver>com.mysql.jdbc.Driver</driver>
                            <url>jdbc:mysql://localhost:3306</url>
                            <username>root</username>
                            <password></password>
                            <settingsKey>sensibleKey</settingsKey>
                            <skip>${maven.test.skip}</skip>
                            <autocommit>true</autocommit>
                            <sqlCommand>                                                                        
                                create database if not exists orm_hibernate_one2many_example1;                                                 
                            </sqlCommand>
                        </configuration>
                    </execution>
                                       
                                      
                    <execution>
                        <id>create-schema (mysql)</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <driver>com.mysql.jdbc.Driver</driver>
                            <url>jdbc:mysql://localhost:3306</url>
                            <username>root</username>
                            <password></password>
                            <settingsKey>sensibleKey</settingsKey>
                            <skip>${maven.test.skip}</skip>
                            <autocommit>true</autocommit>
                            <srcFiles>
                                <srcFile>src/main/resources/orm/hibernate/one2many/example1/create-schema.sql</srcFile>
                            </srcFiles>
                        </configuration>
                    </execution>


                    <execution>
                        <id>create-data (mysql)</id>
                        <!-- originally it's process-test-resources, but hbm2dao is using test-compile, which is even later than process-test-resources  -->
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <driver>com.mysql.jdbc.Driver</driver>
                            <url>jdbc:mysql://localhost:3306</url>
                            <username>root</username>
                            <password></password>
                            <settingsKey>sensibleKey</settingsKey>
                            <autocommit>true</autocommit>
                            <srcFiles>                                            
                                <srcFile>src/test/resources/orm/hibernate/one2many/example1/insert-record.sql</srcFile>
                            </srcFiles>
                        </configuration>
                                               
                    </execution>
                    
                </executions>
            </plugin>
        
     
     
            <!-- generate-sources -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>hibernate3-maven-plugin</artifactId>
                <version>2.2</version>
                <dependencies>
                    <dependency>
                        <groupId>org.hibernate</groupId>
                        <artifactId>hibernate-tools</artifactId>
                        <version>3.2.4.GA</version>
                    </dependency>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>5.1.9</version>
                    </dependency>   
                </dependencies>
                
                <executions>
                
                    <execution>
                        <id>orm.hibernate.one2many.example1 | generate pojo</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>hbm2java</goal>
                        </goals>
                        <configuration>
                            <components>
                                <component>
                                    <name>hbm2java</name>
                                    <implementation>jdbcconfiguration</implementation>
                                    <outputDirectory>src/main/java</outputDirectory> 
                                </component>
                            </components>
                            <componentProperties>
                                <packagename>orm.hibernate.one2many.example1.gen</packagename>                                
                                <configurationfile>src/main/resources/orm/hibernate/one2many/example1/hibernate.cfg.xml</configurationfile>
                            </componentProperties>
                        </configuration>
                    </execution>
                    
 
                    <execution>
                        <id>orm.hibernate.one2many.example1 | generate hbm.xml</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>hbm2hbmxml</goal>
                        </goals>
                        <configuration>
                            <components>
                                <component>
                                    <name>hbm2hbmxml</name>
                                    <implementation>jdbcconfiguration</implementation>
                                    <outputDirectory>src/main/resources</outputDirectory>
                                </component>
                            </components>
                            <componentProperties> 
                                <packagename>orm.hibernate.one2many.example1.gen</packagename> 
                                <configurationfile>src/main/resources/orm/hibernate/one2many/example1/hibernate.cfg.xml</configurationfile>
                            </componentProperties>
                        </configuration>
                    </execution>
               
                    <!--                     
                    1.  despite successful generation of DAO  by plugin, but it's unable to import the required java pojo, because the pojo is in different package
                    2.  need to manually import the pojo
                    3.  the generated [pojo]Home seems not that useful   
                    4.  [2015-05-08] found a solution to solve item 1 with template, but failed, because it hits freemaker runtime error in clazz.hasNaturalId() 
                        http://stackoverflow.com/questions/20662640/custom-hibernate-tool-exporter 
                        http://stackoverflow.com/questions/4226379/whats-the-easiest-way-to-amend-the-file-name-of-pojos-during-hbm2java-generatio         
                     -->                     
                    <execution>
                        <id>orm.hibernate.one2many.example1 | generate dao</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>hbm2dao</goal>
                        </goals>
                        <configuration>
                            <components>
                                <component>
                                    <name>hbm2dao</name>
                                    <implementation>jdbcconfiguration</implementation>
                                    <outputDirectory>src/main/java</outputDirectory>
                                </component>
                            </components>
                            <componentProperties> 
                                <packagename>orm.hibernate.one2many.example1.gen</packagename>
                                <configurationfile>src/main/resources/orm/hibernate/one2many/example1/hibernate.cfg.xml</configurationfile>
                                <!-- <filepattern>{package-name}/{class-name}Dao.java</filepattern>  -->
                            </componentProperties>
                        </configuration>
                    </execution>
                    
                     
                    <!-- 
                    
                        1.  <template>dao/daohome.ftl</template> is copied from hibernate-tools-3.2.4.GA.jar
                        2.  keep the directory structure, and copy to scr/main/resources/orm/hibernate/one2many/example1/templateftl/dao/daohome.ftl, except the folders "META-INF" and "org" 
                        3.  changed the followings in /dao/daohome.ftl:
                            -from "class ${declarationNameHome" to "class ${declarationName}Dao"
                            -from "${pojo.getDeclarationName()}Home.class" to "${pojo.getDeclarationName()}Dao.class"
                        4.  hits freemaker runtime error in clazz.hasNaturalId(), unresolved. 
                        5.  there're a number of variable handled by AbstractExporter and GenericExporter (able to see by decompiler)  
                            -artifacts
                            -c2h
                            -c2j
                            -cfg
                            -clazz
                            -exporter
                            -outputdir
                            -pojo
                            -template_path   
                            referece: http://stackoverflow.com/questions/7393794/where-are-the-freemarker-hibernate-classes-referenced-located                     
                     --> 
                    <!--  
                    <execution>
                        <id>orm.hibernate.one2many.example1 | generate dao by template</id>
                        <phase>compile</phase>                        
                        <goals>                         
                            <goal>hbmtemplate</goal>
                        </goals>
                        <configuration>
                            <components>                        
                                 <component>
                                    <name>hbmtemplate</name>
                                    <implementation>jdbcconfiguration</implementation>
                                    <outputDirectory>src/main/java</outputDirectory>
                                </component>
                            </components>
                            <componentProperties>
                                <ejb3>false</ejb3>
                                <jdk5>true</jdk5>
                                <sessionFactoryName>orm_hibernate_one2many_example1</sessionFactoryName>

                                
                                <packagename>orm.hibernate.one2many.example1</packagename>
                                <configurationfile>src/main/resources/orm/hibernate/one2many/example1/hibernate.cfg.xml</configurationfile>                                                               
                                <templatepath>src/main/resources/orm/hibernate/one2many/example1/templateftl</templatepath>
                                <templateprefix>dao/</templateprefix> 
                                <filepattern>{package-name}/{class-name}Dao.java</filepattern>
                                <template>dao/daohome.ftl</template>
                                
                            </componentProperties>
                        </configuration>
                    </execution> 
                    -->
                </executions>               
            </plugin>
            
     
            <!-- compile -->                  
            <plugin>                                   
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.0</version>
                <configuration>
                    <source>1.5</source>     <!-- annotation requires JDK 1.5 -->
                    <target>1.5</target>
                </configuration>                         
            </plugin>  
            
                  
            
                  
            <!-- integration-test -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.12</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
                   
        </plugins>    
    </build>     
        

    <dependencies>
           
        <!-- junit -->                
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.10</version>
            <type>jar</type>
            <scope>compile</scope>
        </dependency>
        
        
        <!-- hibernate   -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>3.6.10.Final</version>
        </dependency>
        
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>4.1.0.Final</version>
        </dependency>
        
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>4.1.0.Final</version>
        </dependency>

                        
                        
        <!-- hibernate3-maven-plugin | hbm2dao -->
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.2</version>
        </dependency>        
                             
        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.9</version>
        </dependency>
                
        <!-- javax -->
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <version>6.0</version>
        </dependency>
                
        <!-- ant plugin: start-jetty for JNDI server -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-util</artifactId>
            <version>${jetty.version}</version>
        </dependency>  
        
    </dependencies>             
</project>